✅ 1. Index Recommendations
A. dn_port_bmrk_position (2 billion rows)
➡ Critical access patterns:

Frequent filtering on asof_dt
Joins on asset_id, portfolio_id

Aggregations on various measure columns

✔ Recommended index:
CREATE NONCLUSTERED INDEX IX_dn_port_bmrk_position_asof_asset_portfolio
ON dn_port_bmrk_position (asof_dt, asset_id, portfolio_id)
INCLUDE (
    synthetic_look_through,
    port_pct_mv, bmrk_pct_mv,
    port_pct_adj_nmv_mv, bmrk_pct_adj_nmv_mv,
    port_unified_mpc1_sprd_contrib, bmrk_unified_mpc1_sprd_contrib,
    port_unified_rec_sprd_contrib, bmrk_unified_rec_sprd_contrib,
    port_spread_dur_contrib, bmrk_spread_dur_contrib,
    port_pricing_source, bmrk_pricing_source
)
WITH (DATA_COMPRESSION = PAGE);

B. dn_security_ts (300 million rows)
➡ Critical for sector and rating data.
✔ Recommended index:
CREATE NONCLUSTERED INDEX IX_dn_security_ts_asof_asset
ON dn_security_ts (asof_dt, asset_id)
INCLUDE (pgim_sector, mid_value, sec_type)
WITH (DATA_COMPRESSION = PAGE);

C. dn_analytic (Medium)
✔ Recommended index:
CREATE NONCLUSTERED INDEX IX_dn_analytic_asof_asset_source
ON dn_analytic (asof_dt, asset_id, pricing_source)
INCLUDE (pru_wal, oas)
WITH (DATA_COMPRESSION = PAGE);

D. dn_security (8 million rows)
✔ Recommended index:
CREATE NONCLUSTERED INDEX IX_dn_security_asset
ON dn_security (asset_id)
INCLUDE (currency, underlying_asset_id)
WITH (DATA_COMPRESSION = PAGE);

✅ 2. Partitioning Strategy (Optional but Recommended)
If your queries always filter on asof_dt, partitioning large tables on asof_dt will drastically improve query speed and maintenance.

Example for dn_port_bmrk_position:

-- Create partition function
CREATE PARTITION FUNCTION pf_asof_dt_range (DATE)
AS RANGE RIGHT FOR VALUES ('2023-12-31', '2024-03-31', '2024-06-30', '2024-09-30', '2024-12-31', '2025-03-31', '2025-06-30');

-- Create partition scheme
CREATE PARTITION SCHEME ps_asof_dt_range
AS PARTITION pf_asof_dt_range ALL TO ([PRIMARY]); -- or spread across filegroups if needed

-- Create the table or rebuild into this scheme
-- Example for rebuilding
CREATE CLUSTERED INDEX IX_dn_port_bmrk_position_partitioned
ON dn_port_bmrk_position (asof_dt, asset_id)
ON ps_asof_dt_range (asof_dt);

Do the same for dn_security_ts if performance still lags.

✅ 3. Additional Options
Option	Purpose
DATA_COMPRESSION = PAGE	Saves storage and IO for read-mostly tables
Filtered indexes on recent asof_dt	Speeds up latest-period queries
Batch inserts into temp tables	If temp table load is slow, try batching by portfolio_id

✔ Next Steps
Estimate index size & rebuild time before applying on production.

If you have Enterprise Edition, consider Columnstore indexes on read-heavy measures for aggregation.

Monitor wait stats (PAGEIOLATCH, CXPACKET) during query execution to fine-tune parallelism.

Want me to generate exact DDL scripts to partition or compress your tables?