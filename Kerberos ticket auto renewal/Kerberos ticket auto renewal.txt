The maximum lifetime of a Kerberos ticket is controlled by policy settings in Active Directory (or the KDC, in general). There are two key time settings:

1. Maximum lifetime for user ticket (TGT)
This is the maximum number of days a ticket-granting ticket (TGT) can be valid.

Default in Active Directory: 10 hours
Maximum possible value: 99,999 hours (~4,166 days) ‚Äî but this is strongly discouraged and almost never used.

2. Maximum renewable lifetime
This defines how long the ticket can be renewed without re-authentication.

Default in Active Directory: 7 days
Maximum allowed: in theory up to 99,999 hours, but practical limits are usually set by domain policy, typically up to 30 days or less.

Where to Set This (Admins):
In Group Policy ‚Üí Computer Configuration > Policies > Windows Settings > Security Settings > Account Policies > Kerberos Policy:

Maximum lifetime for user ticket
Maximum lifetime for service ticket
Maximum lifetime for user ticket renewal

Example:
If you want a Kerberos ticket to last 30 days, you'd need:

TGT lifetime = 30 days
Renewable lifetime ‚â• 30 days

The requesting client must explicitly ask for the longer duration (e.g., kinit -l 30d in Linux)

Important:
Even if configured, service tickets and TGTs are typically short-lived for security. Long-lived tickets increase risk in case of credential compromise.

To keep access alive over long periods, use renewable tickets with automation, not long static tickets.

You said:
Linux, Windows, AD domain using a service account

you're using Linux to authenticate to a Windows AD domain via Kerberos using a service account. Here's what you need to know about max ticket lifetime and how to extend it safely.

üîí Kerberos Ticket Lifetime Limits in AD
On the Active Directory (Windows) side, the max lifetime for Kerberos tickets is controlled by domain policy:

Setting	Default	Max Allowed (theoretical)
Max lifetime for user ticket (TGT)	10 hours	~4166 days (not recommended)
Max lifetime for service ticket	600 minutes (10 hours)	~4166 days
Max lifetime for ticket renewal	7 days	Up to 365 days (practical limit)

These are configurable in Group Policy on the AD domain controller:
GPMC.msc ‚Üí Computer Configuration ‚Üí Policies ‚Üí Windows Settings ‚Üí Security Settings ‚Üí Account Policies ‚Üí Kerberos Policy

‚úÖ What You Should Do
For a Linux service account authenticating to AD, the cleanest approach is:

1. Set renewable tickets
Ask for a renewable TGT with a long renewal window:
bash

kinit -l 10h -r 30d service_account@YOUR.DOMAIN.COM

This requests:
-l 10h: 10-hour TGT (same as default)
-r 30d: renewable for 30 days without password reentry

2. Ensure AD allows this
Make sure the Kerberos policy in the domain allows:

TGT lifetime ‚â• -l duration
Renewable lifetime ‚â• -r duration

3. (Optional) Modify service account settings
On the Windows side (in ADUC or PowerShell):

Set the service account to:
Trusted for delegation (if required)

Password never expires

Ensure Account is sensitive and cannot be delegated is unchecked (if delegation is needed)

4. Auto-renew tickets on Linux
Use a cron job or systemd timer to auto-renew:
bash

kinit -R
(Only works within the renewable lifetime)

üîé To Check Current Ticket Lifetime
bash

klist -c /tmp/krb5cc_{UID}

It will show:

Valid starting

Expires

If renewable: renew until

üõë Don‚Äôt Try to Hack Long Static Tickets
Kerberos is designed to limit long-lived static credentials. Instead of requesting a 30-day ticket, use renewable tickets and rotate them.

Would you like a sample Linux script to maintain Kerberos auth over time using your service account?

ChatGPT said:
Here‚Äôs a Linux script that will:

Request a renewable Kerberos TGT using your service account

Periodically renew the ticket before it expires (via cron or systemd)

Optionally log activity for monitoring/debugging

‚úÖ 1. Setup Script: /opt/kerberos/renew_kerberos.sh
bash

#!/bin/bash

# CONFIGURATION
KEYTAB="/opt/kerberos/service_account.keytab"
PRINCIPAL="service_account@YOUR.DOMAIN.COM"
CCACHE="/tmp/krb5cc_service_account"
LIFETIME="10h"
RENEWABLE_LIFETIME="30d"
LOGFILE="/var/log/kerberos_renew.log"

# Ensure directory exists
mkdir -p "$(dirname "$CCACHE")"
mkdir -p "$(dirname "$LOGFILE")"

# Get new ticket if none exists or is expired
if ! klist -c "$CCACHE" -s; then
    echo "$(date) [INFO] Requesting new TGT" >> "$LOGFILE"
    kinit -k -t "$KEYTAB" -c "$CCACHE" -l "$LIFETIME" -r "$RENEWABLE_LIFETIME" "$PRINCIPAL"
else
    # Try renewing ticket
    echo "$(date) [INFO] Renewing TGT" >> "$LOGFILE"
    kinit -R -c "$CCACHE"
    if [ $? -ne 0 ]; then
        echo "$(date) [WARN] Renewal failed, requesting fresh TGT" >> "$LOGFILE"
        kinit -k -t "$KEYTAB" -c "$CCACHE" -l "$LIFETIME" -r "$RENEWABLE_LIFETIME" "$PRINCIPAL"
    fi
fi

########################################
Make it executable:
chmod +x /opt/kerberos/renew_kerberos.sh

‚úÖ 2. Create Service Account Keytab (once)
From a Windows DC:
bash

ktpass -out service_account.keytab -princ service_account@YOUR.DOMAIN.COM -mapuser DOMAIN\service_account -pass {password} -ptype KRB5_NT_PRINCIPAL -crypto AES256-SHA1 -kvno 0

Move securely to /opt/kerberos/service_account.keytab on Linux.

‚úÖ 3. Automate Renewal (cron)
Edit crontab:
bash

crontab -e
Add:

*/30 * * * * /opt/kerberos/renew_kerberos.sh >/dev/null 2>&1

This runs every 30 minutes.

‚úÖ 4. Use the Credential Cache
If a client (e.g., sqlcmd, FreeTDS, Python, etc.) uses Kerberos, point it to:
bash

export KRB5CCNAME=/tmp/krb5cc_service_account

========-------------------------------------------------------------------------------------------=========

üîê What‚Äôs Service Account‚ÄìSpecific
Component	Unique per service account?	Notes
service_account.keytab	‚úÖ Yes	Tied to specific AD user (mapuser) and principal
PRINCIPAL="service@DOMAIN.COM"	‚úÖ Yes	This is your Kerberos identity
CCACHE="/tmp/krb5cc_..."	‚úÖ Recommended to be unique	Avoid collisions between accounts/sessions
Cron job or systemd task	‚úÖ Typically per account	Unless you use a central script to loop over multiple accounts
Ticket lifetime / renewal config	‚úÖ Yes, based on account policy	Could differ if AD applies different policies to each account

‚úÖ Option 1: One Script per Account
Create a version of the script per account:

/opt/kerberos/renew_kerberos_<account1>.sh

/opt/kerberos/renew_kerberos_<account2>.sh

Each uses its own:

Keytab

Principal

Cache file

Set up individual cron jobs or systemd timers for each.

üîÅ Option 2: Single Script for All Accounts
Create one reusable script that loops over all service accounts:
bash

#!/bin/bash

SERVICE_ACCOUNTS=(
  "account1@DOMAIN.COM:/opt/kerberos/account1.keytab:/tmp/krb5cc_account1"
  "account2@DOMAIN.COM:/opt/kerberos/account2.keytab:/tmp/krb5cc_account2"
)

for entry in "${SERVICE_ACCOUNTS[@]}"; do
  IFS=":" read -r PRINCIPAL KEYTAB CCACHE <<< "$entry"

  if ! klist -c "$CCACHE" -s; then
    echo "$(date) [INFO] New TGT for $PRINCIPAL"
    kinit -k -t "$KEYTAB" -c "$CCACHE" -l 10h -r 30d "$PRINCIPAL"
  else
    echo "$(date) [INFO] Renewing TGT for $PRINCIPAL"
    kinit -R -c "$CCACHE" || kinit -k -t "$KEYTAB" -c "$CCACHE" -l 10h -r 30d "$PRINCIPAL"
  fi
done

###############################
Run this from cron every 30 minutes.

Here's a production-grade Kerberos renewal script that supports:
‚Ä¢	üîß Parameter input: principal, keytab, cache file
‚Ä¢	üìú Logging to file (with optional rotation support)
‚Ä¢	üõ†Ô∏è Error handling
‚Ä¢	üîÑ Systemd service and timer templates
________________________________________
‚úÖ 1. Reusable Script: /opt/kerberos/renew_kerberos.sh
bash
CopyEdit
#!/bin/bash
set -euo pipefail

# ---------------------------
# Parameters
# ---------------------------
PRINCIPAL="${1:-}"
KEYTAB="${2:-}"
CCACHE="${3:-}"
LIFETIME="${4:-10h}"
RENEW_LIFETIME="${5:-30d}"
LOGFILE="${6:-/var/log/kerberos_renew.log}"

# ---------------------------
# Validation
# ---------------------------
if [[ -z "$PRINCIPAL" || -z "$KEYTAB" || -z "$CCACHE" ]]; then
    echo "Usage: $0 <principal> <keytab> <ccache> [lifetime] [renew_lifetime] [logfile]" >&2
    exit 1
fi

mkdir -p "$(dirname "$CCACHE")"
mkdir -p "$(dirname "$LOGFILE")"

# ---------------------------
# Logging Helper
# ---------------------------
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [${1}] $2" >> "$LOGFILE"
}

# ---------------------------
# Main Logic
# ---------------------------
if ! klist -c "$CCACHE" -s; then
    log "INFO" "No valid TGT. Getting new TGT for $PRINCIPAL"
    if kinit -k -t "$KEYTAB" -c "$CCACHE" -l "$LIFETIME" -r "$RENEW_LIFETIME" "$PRINCIPAL"; then
        log "SUCCESS" "New TGT acquired for $PRINCIPAL"
    else
        log "ERROR" "Failed to obtain new TGT for $PRINCIPAL"
        exit 2
    fi
else
    log "INFO" "Attempting TGT renewal for $PRINCIPAL"
    if kinit -R -c "$CCACHE"; then
        log "SUCCESS" "TGT renewed for $PRINCIPAL"
    else
        log "WARN" "Renewal failed; requesting new TGT for $PRINCIPAL"
        if kinit -k -t "$KEYTAB" -c "$CCACHE" -l "$LIFETIME" -r "$RENEW_LIFETIME" "$PRINCIPAL"; then
            log "SUCCESS" "New TGT acquired for $PRINCIPAL"
        else
            log "ERROR" "Failed to obtain new TGT after renewal failure for $PRINCIPAL"
            exit 3
        fi
    fi
fi
Make executable:
bash
CopyEdit
chmod +x /opt/kerberos/renew_kerberos.sh
________________________________________
‚úÖ 2. Systemd Service and Timer
Create these files under /etc/systemd/system/
________________________________________
kerberos-renew-<account>.service
ini
CopyEdit
[Unit]
Description=Kerberos ticket renewal for service account <account>

[Service]
Type=oneshot
ExecStart=/opt/kerberos/renew_kerberos.sh service_account@YOUR.DOMAIN.COM /opt/kerberos/service_account.keytab /tmp/krb5cc_service_account 10h 30d /var/log/kerberos_renew_<account>.log
________________________________________
kerberos-renew-<account>.timer
ini
CopyEdit
[Unit]
Description=Runs Kerberos renewer for <account> every 30 min

[Timer]
OnBootSec=1min
OnUnitActiveSec=30min
Persistent=true

[Install]
WantedBy=timers.target
Enable and start:
bash
CopyEdit
systemctl daemon-reexec
systemctl daemon-reload
systemctl enable --now kerberos-renew-<account>.timer
________________________________________
‚úÖ 3. Logrotate (optional)
Create /etc/logrotate.d/kerberos_renew
conf
/var/log/kerberos_renew_*.log {
    weekly
    rotate 4
    compress
    missingok
    notifempty
    create 0640 root adm
}
‚úÖ 1. Shared Multi-Account Renewal Script
Update /opt/kerberos/renew_all.sh to loop through multiple service accounts:
bash
CopyEdit
#!/bin/bash
set -euo pipefail

# ---------------------------
# Configuration: One line per service account
# Format: principal:keytab:ccache:lifetime:renew_lifetime:logfile
# ---------------------------
ACCOUNTS=(
  "svc_sql@DOMAIN.COM:/opt/kerberos/svc_sql.keytab:/tmp/krb5cc_svc_sql:10h:30d:/var/log/kerberos_renew_svc_sql.log"
  "svc_report@DOMAIN.COM:/opt/kerberos/svc_report.keytab:/tmp/krb5cc_svc_report:10h:30d:/var/log/kerberos_renew_svc_report.log"
)

RENEW_SCRIPT="/opt/kerberos/renew_kerberos.sh"

for entry in "${ACCOUNTS[@]}"; do
  IFS=':' read -r PRINCIPAL KEYTAB CCACHE LIFETIME RENEW_LIFETIME LOGFILE <<< "$entry"
  
  "$RENEW_SCRIPT" "$PRINCIPAL" "$KEYTAB" "$CCACHE" "$LIFETIME" "$RENEW_LIFETIME" "$LOGFILE" || \
  echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] Renewal failed for $PRINCIPAL" >> "$LOGFILE"
done
Make it executable:
bash
CopyEdit
chmod +x /opt/kerberos/renew_all.sh
________________________________________
‚úÖ 2. Systemd Unit Files for All Accounts
/etc/systemd/system/kerberos-renew.service
ini
CopyEdit
[Unit]
Description=Kerberos TGT renewal for multiple service accounts

[Service]
Type=oneshot
ExecStart=/opt/kerberos/renew_all.sh
________________________________________
/etc/systemd/system/kerberos-renew.timer
ini
CopyEdit
[Unit]
Description=Run Kerberos ticket renewal every 30 minutes

[Timer]
OnBootSec=1min
OnUnitActiveSec=30min
Persistent=true

[Install]
WantedBy=timers.target
Enable and start:
bash
CopyEdit
systemctl daemon-reexec
systemctl daemon-reload
systemctl enable --now kerberos-renew.timer
________________________________________
‚úÖ 3. Logrotate Support
bash
CopyEdit
cat <<EOF > /etc/logrotate.d/kerberos_renew
/var/log/kerberos_renew_*.log {
    weekly
    rotate 4
    compress
    missingok
    notifempty
    create 0640 root adm
}
EOF
________________________________________
üîÑ Result
This setup will:
‚Ä¢	Renew Kerberos tickets for all service accounts listed
‚Ä¢	Log separately per account
‚Ä¢	Automatically start at boot and run every 30 minutes
‚Ä¢	Rotate logs weekly
Let me know if you want it to email on failure or retry more aggressively.
To enable email notifications on failure in your multi-account Kerberos renewal setup, follow this guide. We‚Äôll configure:
‚Ä¢	üì® Email alerts when any account renewal fails
‚Ä¢	üì• Uses mail or mailx (installed via mailutils or bsd-mailx)
‚Ä¢	üîß Minimal logic changes to /opt/kerberos/renew_all.sh
________________________________________
‚úÖ 1. Install mail Utility
On most Linux distros:
Debian/Ubuntu:
bash
CopyEdit
sudo apt update && sudo apt install mailutils
RHEL/CentOS/Rocky:
bash
CopyEdit
sudo yum install mailx
________________________________________
‚úÖ 2. Set Notification Email
At the top of /opt/kerberos/renew_all.sh, define who gets alerted:
bash
CopyEdit
ADMIN_EMAIL="admin@example.com"
You can also make this configurable via environment variable if needed.
________________________________________
‚úÖ 3. Update /opt/kerberos/renew_all.sh with Email on Failure
bash
CopyEdit
#!/bin/bash
set -euo pipefail

ADMIN_EMAIL="admin@example.com"
RENEW_SCRIPT="/opt/kerberos/renew_kerberos.sh"

ACCOUNTS=(
  "svc_sql@DOMAIN.COM:/opt/kerberos/svc_sql.keytab:/tmp/krb5cc_svc_sql:10h:30d:/var/log/kerberos_renew_svc_sql.log"
  "svc_report@DOMAIN.COM:/opt/kerberos/svc_report.keytab:/tmp/krb5cc_svc_report:10h:30d:/var/log/kerberos_renew_svc_report.log"
)

for entry in "${ACCOUNTS[@]}"; do
  IFS=':' read -r PRINCIPAL KEYTAB CCACHE LIFETIME RENEW_LIFETIME LOGFILE <<< "$entry"

  if ! "$RENEW_SCRIPT" "$PRINCIPAL" "$KEYTAB" "$CCACHE" "$LIFETIME" "$RENEW_LIFETIME" "$LOGFILE"; then
    ERROR_MSG="$(date '+%Y-%m-%d %H:%M:%S') [ERROR] Renewal failed for $PRINCIPAL"
    echo "$ERROR_MSG" >> "$LOGFILE"

    # Send email
    echo -e "$ERROR_MSG\n\nSee log: $LOGFILE\nHost: $(hostname)" | \
      mail -s "Kerberos Renewal Failed: $PRINCIPAL on $(hostname)" "$ADMIN_EMAIL"
  fi
done
________________________________________
‚úÖ 4. Optional: Use Mail Relay (Postfix or ssmtp)
If your server can't send mail directly, configure it to relay via your mail server:
Example: /etc/ssmtp/ssmtp.conf
ini
CopyEdit
root=admin@example.com
mailhub=smtp.example.com:587
AuthUser=alert@example.com
AuthPass=YourAppPassword
UseTLS=YES
FromLineOverride=YES
Or use postfix with relay host config.
________________________________________
‚úÖ 5. Test Email Manually
bash
CopyEdit
echo "Kerberos test email body" | mail -s "Kerberos Test" admin@example.com
________________________________________
üß™ Result
‚Ä¢	Every 30 minutes, Kerberos renews for all service accounts
‚Ä¢	If any fail:
o	A clear message is logged
o	An email alert is sent with principal, host, and log location


