‚úÖ What It Does:
Finds queries with plan regressions in the last X days

Compares average duration of recent plan vs. historical best

Lists query text, plans, duration delta, and regression ratio

‚öôÔ∏è Parameters:
@DaysRecent: How many days back to consider as ‚Äúrecent‚Äù (default: 3)

@RegressionThreshold: How much slower the plan must be to count as regression (default: 2x slower)

üìú Full Script:

DECLARE @DaysRecent INT = 3;
DECLARE @RegressionThreshold FLOAT = 2.0;

WITH PlanStats AS (
    SELECT
        q.query_id,
        p.plan_id,
        qt.query_sql_text,
        p.is_forced_plan,
        rs.avg_duration,
        rs.last_execution_time,
        CASE 
            WHEN rs.last_execution_time > DATEADD(DAY, -@DaysRecent, GETUTCDATE()) THEN 'Recent'
            ELSE 'Historical'
        END AS TimeCategory
    FROM sys.query_store_query q
    JOIN sys.query_store_query_text qt ON q.query_text_id = qt.query_text_id
    JOIN sys.query_store_plan p ON q.query_id = p.query_id
    JOIN sys.query_store_runtime_stats rs ON p.plan_id = rs.plan_id
),
Pivoted AS (
    SELECT
        query_id,
        query_sql_text,
        MAX(CASE WHEN TimeCategory = 'Recent' THEN avg_duration END) AS RecentAvgDuration,
        MIN(CASE WHEN TimeCategory = 'Historical' THEN avg_duration END) AS HistoricalBestDuration
    FROM PlanStats
    GROUP BY query_id, query_sql_text
),
Regressions AS (
    SELECT *,
        ISNULL(RecentAvgDuration, 0) AS Recent,
        ISNULL(HistoricalBestDuration, 0) AS Historical,
        CASE 
            WHEN HistoricalBestDuration > 0 THEN RecentAvgDuration / HistoricalBestDuration
            ELSE NULL
        END AS RegressionRatio
    FROM Pivoted
)
SELECT TOP 20
    query_id,
    LEFT(query_sql_text, 4000) AS query_sql_text,
    Recent,
    Historical,
    RegressionRatio,
    CASE 
        WHEN RegressionRatio >= @RegressionThreshold THEN '‚ö†Ô∏è Regressed'
        ELSE '‚úÖ OK'
    END AS Status
FROM Regressions
WHERE RegressionRatio IS NOT NULL
  AND RegressionRatio >= @RegressionThreshold
ORDER BY RegressionRatio DESC;
üí° How to Use:
Paste into SSMS

Adjust @DaysRecent if needed

Examine rows marked ‚ö†Ô∏è Regressed

Take the query_id and do plan comparison:

-- Compare plans for a specific regressed query
SELECT 
    p.plan_id,
    p.is_forced_plan,
    p.query_plan,
    rs.avg_duration,
    rs.last_execution_time
FROM sys.query_store_plan p
JOIN sys.query_store_runtime_stats rs ON rs.plan_id = p.plan_id
WHERE p.query_id = @RegressedQueryId
ORDER BY rs.last_execution_time DESC;
